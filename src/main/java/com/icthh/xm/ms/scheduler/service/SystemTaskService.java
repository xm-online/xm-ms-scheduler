package com.icthh.xm.ms.scheduler.service;

import static java.util.stream.Collectors.toList;

import com.icthh.xm.commons.config.client.repository.TenantListRepository;
import com.icthh.xm.commons.tenant.TenantContextHolder;
import com.icthh.xm.commons.tenant.TenantContextUtils;
import com.icthh.xm.ms.scheduler.repository.SystemTaskRepository;
import com.icthh.xm.ms.scheduler.repository.TaskRepository;
import com.icthh.xm.ms.scheduler.service.dto.TaskDTO;
import com.icthh.xm.ms.scheduler.service.mapper.TaskMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Service for additional business logic besides generated by jhipster
 */
@Service
@Transactional
@Slf4j
@RequiredArgsConstructor
public class SystemTaskService {

    private final SystemTaskRepository systemTaskRepository;
    private final TaskRepository taskRepository;
    private final TaskMapper taskMapper;
    private final TenantContextHolder tenantContextHolder;
    private final TenantListRepository tenantListRepository;

    /**
     * Get all the tasks.
     *
     * @return the list of entities
     */
    @Transactional(readOnly = true)
    public List<TaskDTO> findAllNotFinishedTasks() {
        log.debug("Request to get all Tasks without paging");

        List<TaskDTO> tasks = taskRepository.findByEndDateGreaterThanEqual(Instant.now())
                                            .stream().map(taskMapper::toDto).collect(toList());

        tasks.addAll(findNotFinishedTasksFromConfig());

        return tasks;
    }

    // TODO - do we ned this method?
    @Transactional(readOnly = true)
    public List<TaskDTO> findNotFinishedTasksForAllTenants() {
        log.debug("Request to get all Tasks without paging");

        String currentTenantName = TenantContextUtils.getRequiredTenantKeyValue(tenantContextHolder);

        List<TaskDTO> tasks = new ArrayList<>();

        tenantListRepository.getTenants().forEach(tenantName -> {
            TenantContextUtils.setTenant(tenantContextHolder, tenantName);
            tasks.addAll(taskRepository.findByEndDateGreaterThanEqual(Instant.now())
                .stream().map(taskMapper::toDto).collect(toList()));
        });

        TenantContextUtils.setTenant(tenantContextHolder, currentTenantName);

        tasks.addAll(getTasksFromConfigForAllTenants());

        return tasks;
    }

    public List<TaskDTO> findNotFinishedTasksFromConfig() {
        return getTasksFromConfig().stream().filter(t -> t.getEndDate() == null || t.getEndDate().isAfter(Instant.now())).collect(Collectors.toList());
    }


    public List<TaskDTO> getTasksFromConfigForAllTenants() {
        return systemTaskRepository.getConfigTasks().values().stream()
                                   .flatMap(m -> m.values().stream())
                                   .collect(Collectors.toList());
    }

    public TaskDTO findOneTaskFromConfigByKey(final String key) {
        return getTasksFromConfig().stream().filter(dto -> key.equals(dto.getKey())).findFirst().orElse(null);
    }

    public List<TaskDTO> getTasksFromConfig() {
        String tenantKeyValue = TenantContextUtils.getRequiredTenantKeyValue(tenantContextHolder);
        return new ArrayList<>(Optional.ofNullable(systemTaskRepository.getConfigTasks().get(tenantKeyValue))
                                       .orElse(new HashMap<>())
                                       .values());
    }
}
