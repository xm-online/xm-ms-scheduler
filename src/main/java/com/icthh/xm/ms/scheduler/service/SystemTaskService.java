package com.icthh.xm.ms.scheduler.service;

import static java.util.stream.Collectors.toList;

import com.icthh.xm.commons.tenant.TenantContextHolder;
import com.icthh.xm.commons.tenant.TenantContextUtils;
import com.icthh.xm.ms.scheduler.domain.enumeration.StateKey;
import com.icthh.xm.ms.scheduler.repository.SystemTaskRepository;
import com.icthh.xm.ms.scheduler.repository.TaskRepository;
import com.icthh.xm.ms.scheduler.service.dto.TaskDTO;
import com.icthh.xm.ms.scheduler.service.mapper.TaskMapper;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * Service for additional business logic besides generated by jhipster.
 */
@Service
@Transactional
@Slf4j
@RequiredArgsConstructor
public class SystemTaskService {

    private final SystemTaskRepository systemTaskRepository;
    private final TaskRepository taskRepository;
    private final TaskMapper taskMapper;
    private final TenantContextHolder tenantContextHolder;

    /**
     * Get not finished User tasks.
     *
     * @return the list of entities
     */
    @Transactional(readOnly = true)
    public List<TaskDTO> findUserNotFinishedTasks() {
        log.debug("Request to get all Tasks without paging");

        return taskRepository.findByEndDateGreaterThanEqualAndStateKeyNotOrStateKeyNull(Instant.now(),
            StateKey.DONE.name()).stream().map(taskMapper::toDto).collect(toList());
    }

    /**
     * Get not finished System tasks.
     * @return List of entities
     */
    public List<TaskDTO> findSystemNotFinishedTasks() {
        return getSystemTasks().stream()
                               .filter(t -> t.getEndDate() == null || t.getEndDate().isAfter(Instant.now()))
                               .collect(Collectors.toList());
    }

    /**
     * Get one system task.
     * @param key task key
     * @return task
     */
    public TaskDTO findOneSystemTask(final String key) {
        return getSystemTasks().stream().filter(dto -> key.equals(dto.getKey())).findFirst().orElse(null);
    }

    /**
     * Get all System tasks.
     * @return List of entites
     */
    public List<TaskDTO> getSystemTasks() {
        String tenantKeyValue = TenantContextUtils.getRequiredTenantKeyValue(tenantContextHolder);
        return new ArrayList<>(systemTaskRepository.getConfigTasks()
                                                   .getOrDefault(tenantKeyValue, Collections.emptyMap())
                                                   .values());
    }
}
